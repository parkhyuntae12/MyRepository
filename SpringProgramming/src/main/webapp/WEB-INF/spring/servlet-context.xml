<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" /> 

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	<!--bean태그는 스프링관리객체로 만들어줌, 여기서 이름을 지어주지않은 이유는 예약된 이름이 있기 때문애-->
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<!--property는 setter 주입을 해준다 setPrefix("/WEB-INF/views") setSuffix(".jsp") 
		     ref는 객체의 참조를 넘길때 value는 값을 넘길때-->
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.mycompany.myapp" />
	
	<!-- A를 관리객체로 생성  -->
	<beans:bean name="a" class="com.mycompany.myapp.exam09.A"/>
	
	<!-- B를 관리객체로 생성  -->
	<beans:bean name="b" class="com.mycompany.myapp.exam09.B"/>
	
	<!-- ServiceA를 관리객체로 생성  -->
	<beans:bean name="serviceA" class="com.mycompany.myapp.exam09.ServiceA"/>
	
	<!-- ServiceB를 관리객체로 생성 -->
	<beans:bean name="serviceB" class="com.mycompany.myapp.exam09.ServiceB"/>
	
	<!-- ServiceCImpl1를 관리객체로 생성 -->
	<beans:bean name="serviceCImpl1" class="com.mycompany.myapp.exam09.ServiceCImpl1"/>
	
	<!-- ServiceDImpl1를 관리객체로 생성 -->
	<beans:bean name="serviceDImpl1" class="com.mycompany.myapp.exam09.ServiceDImpl2"/>
	
	<!-- C를 관리 객체로 생성 -->
	<beans:bean name="c" class="com.mycompany.myapp.exam09.C">
		<beans:constructor-arg ref="d"/>
	</beans:bean>
			
	<!-- D를 관리 객체로 생성 -->
	<beans:bean name="d" class="com.mycompany.myapp.exam09.D"/>
	
	<!-- E를 관리 객체로 생성 -->
	<beans:bean name="e" class="com.mycompany.myapp.exam09.E">
		<beans:constructor-arg ref="b"/>
		<beans:constructor-arg ref="d"/>
	</beans:bean>
	
	<!-- F를 관리 객체로 생성 -->
	<beans:bean name="f" class="com.mycompany.myapp.exam09.F">
		<beans:constructor-arg ref="serviceA"/>
		<beans:constructor-arg ref="serviceB"/>
		<beans:constructor-arg ref="serviceCImpl1"/>
	</beans:bean>
	
	<!-- Exam09Controoller 컨트롤러 객체를 찾아서 가져오기 -->	
	<beans:bean name="exam09Controller" class="com.mycompany.myapp.exam09.Exam09Controller">
	<!-- Setter 주입
		<beans:property name="setter 이름" ref=" 매개값으로 전달할 객체(관리객체이름)"/>
	 -->
	 <beans:property name="a" ref="a"/>
    <beans:property name="b" ref="b"/><!--  property의 역할 setter주입 -->
	<beans:property name="servicea" ref="serviceA"/>
	<beans:property name="serviceB" ref="serviceB"/>
	<beans:property name="serviceC" ref="serviceCImpl1"/>
	<beans:property name="serviceD" ref="serviceDImpl1"/>
	<beans:property name="c" ref="c"/>
	<beans:property name="e" ref="e"/>
	<beans:property name="f" ref="f"/>
</beans:bean>
	<!-- 웹 클라이언트가 커넥션 풀을 가지고 있는경우 (소규모프로젝트에선 유리하다)-->
	<!-- Connection Pool -->
    <beans:bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
      <beans:property name="driverClass" value="oracle.jdbc.OracleDriver"/>
      <beans:property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:orcl"/>
      <beans:property name="user" value="tester1"/>
      <beans:property name="password" value="kosa12345"/>
      <beans:property name="maxPoolSize" value="3"/>
      <beans:property name="initialPoolSize" value="1"/>
      <beans:property name="acquireIncrement" value="1"/> 
      <beans:property name="minPoolSize" value="1"/><!-- 객체를 참조할땐 ref가온다(값일땐 value) -->
   </beans:bean> 
   
   <!-- WAS가 커넥션 풀을 가지고 있는 경우 (대규모프로젝트에 유리하다)-->
   <!-- 스프링 관리객체를 만드는 역할을한다(WAS에서 객체를찾아 id를매긴다) -->
  <!--  <jee:jndi-lookup id="dataSource" jndi-name="jdbc/orcl"></jee:jndi-lookup> -->
   
   <!-- JdbcTemplate 객체 생성 -->
   <beans:bean name="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
   	<beans:property name="dataSource" ref="dataSource"/>
   </beans:bean>
   
</beans:beans>